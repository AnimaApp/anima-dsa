import type { DesignTokenAlias } from '.';
type JSONStringValue = string | DesignTokenAlias;
type JSONNumberValue = number | DesignTokenAlias;
type JSONBooleanValue = boolean | DesignTokenAlias;
type JSONNullValue = null | DesignTokenAlias;
type JSONArrayValue = JSONTokenValue[] | DesignTokenAlias;
export type JSONObjectValue = {
    [key: string]: JSONTokenValue;
} | DesignTokenAlias;
export type JSONTokenValue = JSONStringValue | JSONNumberValue | JSONBooleanValue | JSONNullValue | JSONObjectValue | JSONArrayValue | DesignTokenAlias;
type ColorValue = `#${string}` | DesignTokenAlias;
type DimensionValue = `${number}px` | `${number}rem` | DesignTokenAlias;
type FontFamilyValue = string | string[] | DesignTokenAlias;
type FontWeightValue = number | string | DesignTokenAlias;
type DurationValue = `${number}ms` | DesignTokenAlias;
type CubicBezierValue = [P1x: number, P1y: number, P2x: number, P2y: number] | DesignTokenAlias;
type ShadowValue = {
    color: ColorValue;
    offsetX: DimensionValue;
    offsetY: DimensionValue;
    blur: DimensionValue;
    spread: DimensionValue;
} | DesignTokenAlias;
type StrokeStyleValue = 'solid' | 'dashed' | 'dotted' | 'double' | 'groove' | 'ridge' | 'outset' | 'inset' | {
    dashArray: DimensionValue[];
    lineCap: 'round' | 'butt' | 'square';
} | DesignTokenAlias;
type BorderValue = {
    color: ColorValue;
    width: DimensionValue;
    style: StrokeStyleValue;
} | DesignTokenAlias;
type TransitionValue = {
    duration: DurationValue;
    delay: DurationValue;
    timingFunction: CubicBezierValue;
} | DesignTokenAlias;
type GradientValue = Array<{
    color: ColorValue;
    position: JSONNumberValue;
}> | DesignTokenAlias;
type TypographyValue = {
    fontFamily: FontFamilyValue;
    fontSize: DimensionValue;
    fontWeight: FontWeightValue;
    letterSpacing: DimensionValue;
    lineHeight: JSONStringValue;
} | DesignTokenAlias;
export type DesignTokenValue = JSONTokenValue | ColorValue | DimensionValue | FontFamilyValue | FontWeightValue | DurationValue | CubicBezierValue | ShadowValue | StrokeStyleValue | BorderValue | TransitionValue | GradientValue | TypographyValue;
export {};
//# sourceMappingURL=value.d.ts.map