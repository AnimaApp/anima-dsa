import { getFlatDesignTokenNames } from './getFlatDesignTokenNames';
import { getToken } from './getToken';
const sortKeys = (o) => {
    if (!o)
        return [];
    return Object.keys(o).sort();
};
const getTokenValuesForNames = (dt1, names) => {
    const designTokens = {};
    names.forEach((name) => {
        const token = getToken(dt1, name);
        if (token != null) {
            designTokens[name] = token;
        }
    });
    return designTokens;
};
export const getDiffForTokens = (dtBefore, dtAfter, options = {}) => {
    const dt1Names = getFlatDesignTokenNames(dtBefore);
    const dt2Names = getFlatDesignTokenNames(dtAfter);
    const flattenedDt1 = getTokenValuesForNames(dtBefore, dt1Names);
    const flattenedDt2 = getTokenValuesForNames(dtAfter, dt2Names);
    const { includeAdditions = true, includeModifications = true, includeRemovals = true, } = options;
    const removals = includeRemovals
        ? getRemovals(flattenedDt1, flattenedDt2)
        : [];
    const additions = includeAdditions
        ? getAdditions(flattenedDt1, flattenedDt2)
        : [];
    const modifications = includeModifications
        ? getModifications(flattenedDt1, flattenedDt2)
        : [];
    return [...removals, ...additions, ...modifications];
};
const getRemovals = (before, after) => {
    const beforeKeys = Object.keys(before);
    const removals = [];
    beforeKeys.forEach((key) => {
        const rmTmp = before[key];
        if (rmTmp == null)
            throw new Error('No after key');
        if (after[key] == null) {
            removals.push({
                type: 'REMOVAL',
                name: key,
                value: rmTmp.$value,
            });
        }
    });
    return removals;
};
const getAdditions = (before, after) => {
    const afterKeys = Object.keys(after);
    const additions = [];
    afterKeys.forEach((key) => {
        const addTmp = after[key];
        if (addTmp == null)
            throw new Error('No after key');
        if (before[key] == null) {
            additions.push({
                type: 'ADDITION',
                name: key,
                value: addTmp.$value,
            });
        }
    });
    return additions;
};
const getModifications = (before, after) => {
    const beforeKeys = Object.keys(before);
    const modifications = [];
    beforeKeys.forEach((key) => {
        const val1 = before[key];
        const val2 = after[key];
        if (val1 == null || val2 == null)
            return;
        const values1 = JSON.stringify(val1 === null || val1 === void 0 ? void 0 : val1.$value, sortKeys(val1 === null || val1 === void 0 ? void 0 : val1.$value));
        const values2 = JSON.stringify(val2 === null || val2 === void 0 ? void 0 : val2.$value, sortKeys(val2 === null || val2 === void 0 ? void 0 : val2.$value));
        if (values1 === values2)
            return;
        modifications.push({
            type: 'MODIFICATION',
            name: key,
            value: {
                before: val1.$value,
                after: val2.$value,
            },
        });
    });
    return modifications;
};
