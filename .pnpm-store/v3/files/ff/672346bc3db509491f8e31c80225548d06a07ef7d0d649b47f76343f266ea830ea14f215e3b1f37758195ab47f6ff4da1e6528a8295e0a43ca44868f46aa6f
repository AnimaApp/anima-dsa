var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DesignTokenManager_instances, _DesignTokenManager_tokens, _DesignTokenManager_store, _DesignTokenManager_remoteFilePath, _DesignTokenManager_getParentGroup;
import { isDesignToken } from './types/validators';
import cloneDeep from 'lodash.clonedeep';
import { PathValidationError } from './errors';
import { getToken } from './getToken';
export class DesignTokenManager {
    constructor(args) {
        var _a;
        _DesignTokenManager_instances.add(this);
        _DesignTokenManager_tokens.set(this, {});
        _DesignTokenManager_store.set(this, void 0);
        _DesignTokenManager_remoteFilePath.set(this, void 0);
        this.onTokensChange = () => { };
        const initialTokens = cloneDeep((_a = args === null || args === void 0 ? void 0 : args.initialTokens) !== null && _a !== void 0 ? _a : {});
        this.setTokens(initialTokens);
        __classPrivateFieldSet(this, _DesignTokenManager_store, args === null || args === void 0 ? void 0 : args.store, "f");
        __classPrivateFieldSet(this, _DesignTokenManager_remoteFilePath, args === null || args === void 0 ? void 0 : args.remoteFilePath, "f"); // Probably better in the store ??
    }
    getToken(pathToKey) {
        return getToken(this.tokens, pathToKey);
    }
    // Name can be with dot notation to access nested values
    // If key does not exist it will create them
    setToken(pathToKey, token) {
        const properties = pathToKey.split('.');
        //  cloned tokens otherwise we get the following TypeError: Cannot add property selected, object is not extensible
        const clonedTokens = Object.assign({}, __classPrivateFieldGet(this, _DesignTokenManager_tokens, "f"));
        const lastKey = properties[properties.length - 1];
        const parentGroup = __classPrivateFieldGet(this, _DesignTokenManager_instances, "m", _DesignTokenManager_getParentGroup).call(this, clonedTokens, pathToKey);
        parentGroup[lastKey] = token;
        this.tokens = clonedTokens;
    }
    setTokens(tokens) {
        const keys = Object.keys(tokens);
        keys.forEach((key) => {
            const token = tokens[key];
            if (token) {
                this.setToken(key, token);
            }
        });
    }
    removeToken(pathToKey) {
        const properties = pathToKey.split('.');
        const lastKey = properties[properties.length - 1];
        const clonedTokens = Object.assign({}, __classPrivateFieldGet(this, _DesignTokenManager_tokens, "f"));
        const parentGroup = __classPrivateFieldGet(this, _DesignTokenManager_instances, "m", _DesignTokenManager_getParentGroup).call(this, clonedTokens, pathToKey);
        delete parentGroup[lastKey];
        this.tokens = clonedTokens;
    }
    set tokens(tokens) {
        __classPrivateFieldSet(this, _DesignTokenManager_tokens, tokens, "f");
        this.onTokensChange(Object.assign({}, tokens));
    }
    get tokens() {
        return __classPrivateFieldGet(this, _DesignTokenManager_tokens, "f");
    }
    setStore({ store, filePath }) {
        __classPrivateFieldSet(this, _DesignTokenManager_store, store, "f");
        __classPrivateFieldSet(this, _DesignTokenManager_remoteFilePath, filePath, "f");
    }
    getTokensFromStore(args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { branch } = args;
            if (__classPrivateFieldGet(this, _DesignTokenManager_store, "f") == null || __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f") == null)
                throw new Error('No store set');
            const fileContent = yield __classPrivateFieldGet(this, _DesignTokenManager_store, "f").getFileContent({
                filePath: __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f"),
                branch,
            });
            return JSON.parse(fileContent);
        });
    }
    updateStoreRequest({ title, description, branchName, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _DesignTokenManager_store, "f") == null || __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f") == null)
                throw new Error('No store set');
            yield __classPrivateFieldGet(this, _DesignTokenManager_store, "f").writeRequest({
                filePath: __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f"),
                newfileContent: JSON.stringify(__classPrivateFieldGet(this, _DesignTokenManager_tokens, "f"), null, 2),
                title,
                description,
                newBranch: branchName,
            });
        });
    }
    getDesignTokensLastUpdateTime() {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _DesignTokenManager_store, "f") == null || __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f") == null)
                throw new Error('No store set');
            return yield __classPrivateFieldGet(this, _DesignTokenManager_store, "f").getFileLastUpdateTime({ filePath: __classPrivateFieldGet(this, _DesignTokenManager_remoteFilePath, "f") });
        });
    }
    getUpdateRequests() {
        return __awaiter(this, void 0, void 0, function* () {
            if (__classPrivateFieldGet(this, _DesignTokenManager_store, "f") == null)
                throw new Error('No store set');
            return yield __classPrivateFieldGet(this, _DesignTokenManager_store, "f").getRequests();
        });
    }
}
_DesignTokenManager_tokens = new WeakMap(), _DesignTokenManager_store = new WeakMap(), _DesignTokenManager_remoteFilePath = new WeakMap(), _DesignTokenManager_instances = new WeakSet(), _DesignTokenManager_getParentGroup = function _DesignTokenManager_getParentGroup(tokens, pathToKey) {
    const properties = pathToKey.split('.');
    let res = tokens;
    for (let i = 0; i < properties.length - 1; i++) {
        let nextValue = res[properties[i]];
        if (nextValue == null) {
            nextValue = {};
            res[properties[i]] = nextValue;
        }
        else if (isDesignToken(nextValue)) {
            throw new PathValidationError("Can't access nested value of a token");
        }
        res = nextValue;
    }
    return res;
};
